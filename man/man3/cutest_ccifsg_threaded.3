'\" e  @(#)cutest_ccifsg_threaded v1.0 12/2012;
.TH cutest_ccifsg_threaded 3M "31 Dec 2012" "CUTEst user documentation" "CUTEst user documentation"
.SH NAME
CUTEST_ccifsg_threaded \- CUTEst tool to evaluate a single constraint function 
value and possibly gradient in sparse format.
.SH SYNOPSIS
.HP 1i
CALL CUTEST_ccifsg_threaded( status, n, icon, X, ci, 
nnzgci, lgci, GCI_val, GCI_var, grad, thread )

.HP 1i
For real rather than double precision arguments, instead

.HP 1i
CALL CUTEST_ccifsg_threaded_s( ... )

.HP 1i
and for quadruple precision arguments, when available,

.HP 1i
CALL CUTEST_ccifsg_threaded_q( ... )

.SH DESCRIPTION
The CUTEST_ccifsg_threaded subroutine evaluates the value of a particular 
constraint function of the problem decoded from a SIF file by the 
script \fIsifdecoder\fP at the point X, and
possibly its gradient in the constrained minimization case. The
gradient is stored in sparse format. The problem under consideration
is to minimize or maximize an objective function
.EQ
f(x)
.EN
over all
.EQ
x
.EN
\(mo
.EQ
R sup n
.EN
subject to
general equations
.EQ
c sub i (x) ~=~ 0,
.EN
.EQ
~(i
.EN
\(mo
.EQ
{ 1 ,..., m sub E } ),
.EN
general inequalities
.EQ
c sub i sup l ~<=~ c sub i (x) ~<=~ c sub i sup u,
.EN
.EQ
~(i
.EN
\(mo
.EQ
{ m sub E + 1 ,..., m }),
.EN
and simple bounds
.EQ
x sup l ~<=~ x ~<=~ x sup u.
.EN
The objective function is group-partially separable 
and all constraint functions are partially separable.

.LP 
.SH ARGUMENTS
The arguments of CUTEST_ccifsg_threaded are as follows
.TP 5
.B status \fP[out] - integer
the outputr status: 0 for a succesful call, 1 for an array 
allocation/deallocation error, 2 for an array bound error,
3 for an evaluation error, 4 for an out-of-range thread,
.TP
.B n \fP[in] - integer
the number of variables for the problem,
.TP 5
.B icon \fP[in] - integer
the index of the constraint function to be evaluated,
.TP
.B X \fP[in] - real/double precision
an array which gives the current estimate of the solution of the problem,
.TP
.B ci \fP[out] - real/double precision
the value of constraint function ICON at X,
.TP
.B nnzgci \fP[out] - integer
the number of nonzeros in GCI_val,
.TP
.B lgci \fP[in] - integer
the declared length of GCI_val and GCI_var,
.TP
.B GCI_val \fP[out] - real/double precision
an array which gives the nonzeros of the gradient of constraint
function icon evaluated at X. The i-th entry of GCI_val gives the value
of the derivative with respect to variable GCI_var(i) of function
icon. 
.TP
.B GCI_var \fP[out] - integer
an array whose i-th component is the index of the variable with
respect to which GCI_val(i) is the derivative,
.TP
.B grad \fP[in] - logical
a logical variable which should be set .TRUE. if the gradient of the
constraint functions are required and .FALSE. otherwise,
.TP
.B thread \fP[in] - integer
thread chosen for the evaluation; threads are numbered
from 1 to the value threads set when calling CUTEST_csetup_threaded.
.LP
.SH AUTHORS
I. Bongartz, A.R. Conn, N.I.M. Gould, D. Orban and Ph.L. Toint
.SH "SEE ALSO"
\fICUTEst: a Constrained and Unconstrained Testing 
Environment with safe threads\fP,
   N.I.M. Gould, D. Orban and Ph.L. Toint,
   Computational Optimization and Applications \fB60\fP:3, pp.545-557, 2014.

\fICUTEr (and SifDec): A Constrained and Unconstrained Testing
Environment, revisited\fP,
   N.I.M. Gould, D. Orban and Ph.L. Toint,
   ACM TOMS, \fB29\fP:4, pp.373-394, 2003.

\fICUTE: Constrained and Unconstrained Testing Environment\fP,
   I. Bongartz, A.R. Conn, N.I.M. Gould and Ph.L. Toint, 
   ACM TOMS, \fB21\fP:1, pp.123-160, 1995.

sifdecoder(1)
