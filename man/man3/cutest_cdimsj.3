'\" e  @(#)cutest_cdimsj v1.0 12/2012;
.TH cutest_cdimsj 3M "4 Dec 2012" "CUTEst user documentation" "CUTEst user documentation"
.SH NAME
CUTEST_cdimsj \- CUTEst tool to determine the number of nonzeros 
required to store the
matrix of gradients of the objective function and constraints, in
sparse format.
.SH SYNOPSIS
.HP 1i
CALL CUTEST_cdimsj( status, nnzj )

.HP 1i
For real rather than double precision arguments, instead

.HP 1i
CALL CUTEST_cdimsj_s( ... )

.HP 1i
and for quadruple precision arguments, when available,

.HP 1i
CALL CUTEST_cdimsj_q( ... )

.SH DESCRIPTION
The CUTEST_cdimsj subroutine determines the number of nonzero elements
required to store the matrix of gradients of the objective function
and constraint functions for the problem decoded into OUTSDIF.d in the
constrained minimization case. The matrix is stored in sparse format.

The problem under consideration
is to minimize or maximize an objective function
.EQ
f(x)
.EN
over all
.EQ
x
.EN
\(mo
.EQ
R sup n
.EN
subject to
general equations
.EQ
c sub i (x) ~=~ 0,
.EN
.EQ
~(i
.EN
\(mo
.EQ
{ 1 ,..., m sub E } ),
.EN
general inequalities
.EQ
c sub i sup l ~<=~ c sub i (x) ~<=~ c sub i sup u,
.EN
.EQ
~(i
.EN
\(mo
.EQ
{ m sub E + 1 ,..., m }),
.EN
and simple bounds
.EQ
x sup l ~<=~ x ~<=~ x sup u.
.EN
The objective function is group-partially separable and all constraint 
functions are partially separable.
.LP 
.SH ARGUMENTS
The arguments of CUTEST_cdimsj are as follows
.TP 5
.B status \fP[out] - integer
the outputr status: 0 for a succesful call, 1 for an array 
allocation/deallocation error, 2 for an array bound error,
3 for an evaluation error,
.TP
.B nnzj \fP[out] - integer
the number of nonzero elements in the Jacobian matrix.
.LP
.SH AUTHORS
I. Bongartz, A.R. Conn, N.I.M. Gould, D. Orban and Ph.L. Toint
.SH "SEE ALSO"
\fICUTEst: a Constrained and Unconstrained Testing 
Environment with safe threads\fP,
   N.I.M. Gould, D. Orban and Ph.L. Toint,
   Computational Optimization and Applications \fB60\fP:3, pp.545-557, 2014.

\fICUTEr (and SifDec): A Constrained and Unconstrained Testing
Environment, revisited\fP,
   N.I.M. Gould, D. Orban and Ph.L. Toint,
   ACM TOMS, \fB29\fP:4, pp.373-394, 2003.

\fICUTE: Constrained and Unconstrained Testing Environment\fP,
   I. Bongartz, A.R. Conn, N.I.M. Gould and Ph.L. Toint, 
   ACM TOMS, \fB21\fP:1, pp.123-160, 1995.

sifdecoder(1).
